#!/usr/bin/env node

var path = require('path'),
    exec = require('child_process').exec,
    fs = require('fs'),
    http = require('http'),
    Q = require('q'),
    $ = require('jQuery'),
    requirejs = require('requirejs');

// initialize

var rootDir = path.dirname(path.normalize(__dirname)),
    port = 8080,
    address = '127.0.0.1',
    templatePathname = rootDir + '/template',
    targetPathname = rootDir + '/target',
    templatesRollupPathname = targetPathname + '/templates.js',
    cssRollupPathname = targetPathname + '/index.css',
    tvFinderAppJavascriptRollupPathname = targetPathname + '/tvFinderApp-client.js',
    tvFinderAppJavascriptRollupServersidePathname = targetPathname + '/tvFinderApp-server.js',
    tvFinderAppIndexHtmlPathname = targetPathname + '/index.html',
    televisionsJavascriptPathname = targetPathname + '/televisions.js',
    jsonPathname = rootDir + '/json',
    televisionsJsonPathname = jsonPathname + '/televisions.json',
    reviewJsonPathname = jsonPathname + '/reviews.json',
    productJsonPathname = jsonPathname + '/product',
    appPathname = rootDir + '/app',
    pagePathname = rootDir + '/page',
    viewPathname = rootDir + '/view',
    modelPathname = rootDir + '/model',
    appsLoadedAfter = new Date().getTime(),
    pagesLoadedAfter = appsLoadedAfter,
    viewsLoadedAfter = appsLoadedAfter,
    modelsLoadedAfter = appsLoadedAfter,
    tvFinderHtml,
    rollupJCssCommand = [
        'node',
        '/usr/local/lib/node_modules/requirejs/bin/r.js',
        '-o',
        'cssIn="' + rootDir + '/css/tvFinder.css"',
        'out="' + cssRollupPathname + '"'
    ].join(' '),
    rollupJavascriptCommand = [
        'node',
        '/usr/local/lib/node_modules/requirejs/bin/r.js',
        '-o',
        rootDir + '/config/tvFinderApp-client.json'
    ].join(' '),
    rollupJavascriptServersideCommand = [
        'node',
        '/usr/local/lib/node_modules/requirejs/bin/r.js',
        '-o',
        rootDir + '/config/tvFinderApp-server.json'
    ].join(' '),
    compileRenderersCommand = [
        'handlebars',
        '--amd',
        templatePathname + '/*.handlebars',
        '--output',
        templatesRollupPathname
    ].join(' ');

requirejs.config({
        baseUrl: rootDir,
        paths: {
            "content": "lib/content-server",
            "televisions": "lib/televisions-server"
        }
    }
);

requirejs(['lib/environment'], function (environment) {
        environment.televisionsJsonPathname = televisionsJsonPathname;
    }
);

var qCompilePage,
    qRenderPage,
    qUpdateApps,
    qUpdatePages,
    qUpdateViews,
    qUpdateModels,
    qCreateCssRollup,
    qCreateJavascriptRollup,
    qCreateJavascriptRollupServerside,
    qCompileRenderers,
    qCreateTelevisions;

// execution

Q.all([compilePage(), createJavascriptRollup()]).then(
    function () {
        servePage();
    },
    function (error) {
        console.error(error.message);
        process.exit(1);
    }
);

// serve the page

function servePage() {
    var viewResolverMap = [
        { pattern: /^(\/target)?\/index\.css$/, action: serveCssRollup },
        { pattern: /^(\/target)?\/tvFinderApp-client\.js$/, action: serveJavascriptRollup },
        { pattern: /^(\/target)?\/(index\.html)?$/, action: serveTvFinderHtml },
        { pattern: /^(\/node_modules\/.*\.js)$/, action: serveJavascriptLibrary },
        { pattern: /^\/(css\/.*\.css)$/, action: serveCss },
        { pattern: /^\/(((app)|(lib)|(model)|(view)|(target))\/.*\.js)$/, action: serveJavascript },
        { pattern: /^\/(image\/.*\.png)$/, action: servePng },
        { pattern: /^\/favicon.ico$/, action: serveFaviconIco },
        { pattern: /^\/(font\/.*\.otf)$/, action: serveFont },
        { pattern: /^\/product\/([0-9]*)$/, action: serveProductJson },
        { pattern: /^\/review\/([0-9]*)$/, action: serveReviewJson },
        { pattern: /^\/json\/product\/item-([0-9]*)\.json$/, action: serveProductJson },
        { pattern: /^\/json\/reviews.json$/, action: serveReviewJson },
        { pattern: /^\/$/, action: serveTvFinderHtml }
    ];
    http.createServer(function (req, res) {
            for (index = 0; index < viewResolverMap.length; index++) {
                values = req.url.match(viewResolverMap[index].pattern);
                if (values) {
                    viewResolverMap[index].action(values, req, res).fail(
                        function (error) {
                            if (error.code === 'ENOENT') {
                                console.error(req.url + ': not found: matched: ' + viewResolverMap[index].pattern);
                                notFound(req, res);
                            }
                            else {
                                console.error(req.url + ': ' + error.code + ': ' + error.errno);
                                console.error(req.url, error);
                                res.writeHead(500, {'Content-Type': 'text/plain' });
                                res.end('server error: ' + error.code + ': ' + error.errno);
                            }
                        }
                    );
                    return;
                }
            }
            console.error(req.url + ': not resolved');
            notFound(req, res);
        }
    ).listen(port, address);
    console.log('started server ' + address + ' on port ' + port);
}

function notFound(req, res) {
    res.writeHead(404, {'Content-Type': 'text/plain' });
    res.end('not found');
}

function serveCssRollup(values, req, res) {
    var qServeCssRollup = Q.defer();
    createCssRollup().then(function () {
            fs.readFile(cssRollupPathname, 'ascii', function (error, contents) {
                    if (error) {
                        qServeCssRollup.reject(error);
                    }
                    else {
                        res.writeHead(200, { 'Content-Type': 'text/css' });
                        res.end(contents);
                        qServeCssRollup.resolve();
                    }
                }
            );
        },
        function (error) {
            qServeCssRollup.reject(error);
        }
    );
    return qServeCssRollup.promise;
}

function serveCss(values, req, res) {
    var qServeCss = Q.defer();
    fs.readFile(values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeCss.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'text/css' });
                res.end(contents);
                qServeCss.resolve();
            }
        }
    );
    return qServeCss.promise;
}

function serveJavascriptRollup(values, req, res) {
    var qServeJavascriptRollup = Q.defer();
    createJavascriptRollup().then(function () {
            fs.readFile(tvFinderAppJavascriptRollupPathname, 'ascii', function (error, contents) {
                    if (error) {
                        qServeJavascriptRollup.reject(error);
                    }
                    else {
                        res.writeHead(200, { 'Content-Type': 'application/javascript' });
                        res.end(contents);
                        qServeJavascriptRollup.resolve();
                    }
                }
            );
        },
        function (error) {
            qServeJavascriptRollup.reject(error);
        }
    );
    return qServeJavascriptRollup.promise;
}

function serveJavascript(values, req, res) {
    var qServeJavascript = Q.defer();
    fs.readFile(rootDir + '/' + values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeJavascript.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/javascript' });
                res.end(contents);
                qServeJavascript.resolve();
            }
        }
    );
    return qServeJavascript.promise;
}

function serveJavascriptLibrary(values, req, res) {
    var qServeJavascript = Q.defer();
    fs.readFile(rootDir + values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeJavascript.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/javascript' });
                res.end(contents);
                qServeJavascript.resolve();
            }
        }
    );
    return qServeJavascript.promise;
}


function serveFaviconIco(values, req, res) {
    var qServePng = Q.defer();
    fs.readFile(rootDir + '/favicon.ico', function (error, contents) {
            if (error) {
                qServePng.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'image/x-icon' });
                res.end(contents);
                qServePng.resolve();
            }
        }
    );
    return qServePng.promise;
}

function servePng(values, req, res) {
    var qServePng = Q.defer();
    fs.readFile(values[1], function (error, contents) {
            if (error) {
                qServePng.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'image/png' });
                res.end(contents);
                qServePng.resolve();
            }
        }
    );
    return qServePng.promise;
}

function serveFont(values, req, res) {
    var qServeFont = Q.defer();
    fs.readFile(values[1], function (error, contents) {
            if (error) {
                qServeFont.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'font/opentype' });
                res.end(contents);
                qServeFont.resolve();
            }
        }
    );
    return qServeFont.promise;
}

function serveProductJson(values, req, res) {
    var qServeProductJson = Q.defer();
    fs.readFile(productJsonPathname + '/item-' + values[1] + '.json', function (error, contents) {
            if (error) {
                qServeProductJson.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(contents);
                qServeProductJson.resolve();
            }
        }
    );
    return qServeProductJson.promise;
}

function serveReviewJson(values, req, res) {
    var qServeReviewJson = Q.defer();
    fs.readFile(reviewJsonPathname, function (error, contents) {
            if (error) {
                qServeReviewJson.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(contents);
                qServeReviewJson.resolve();
            }
        }
    );
    return qServeReviewJson.promise;
}

function serveTvFinderHtml(values, req, res) {
    var qServeTvFinderHtml = Q.defer();
    compilePage().then(
        function (html) {
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(html);
            qServeTvFinderHtml.resolve();
        },
        function (error) {
            qServeTvFinderHtml.reject(error);
        }
    );
    return qServeTvFinderHtml.promise;
}


// compile the page

function compilePage() {
    if (!qCompilePage) {
        qCompilePage = Q.defer();
        Q.all([renderPage(), statGeneratedFile(tvFinderAppIndexHtmlPathname)]).then(
            function (values) {
                var contents = values[0], stat = values[1];
                requirejs(['content'], function (content) {
                        if (contents || !tvFinderHtml) {
                            tvFinderHtml = '<!doctype html>\n\n' + content.unescape(contents);
                        }
                        if (contents || !stat) {
                            fs.writeFile(tvFinderAppIndexHtmlPathname, tvFinderHtml, function (error) {
                                if (error) {
                                    qCompilePage.reject(error);
                                    qCompilePage = undefined;
                                }
                                else {
                                    qCompilePage.resolve(tvFinderHtml);
                                    qCompilePage = undefined;
                                }
                            });
                        }
                        else {
                            qCompilePage.resolve(tvFinderHtml);
                            qCompilePage = undefined;
                        }
                    }
                );
            },
            function (error) {
                qCompilePage.reject(error);
                qCompilePage = undefined;
            }
        );
    }
    return qCompilePage.promise;
}

// render the page

function renderPage() {
    if (!qRenderPage) {
        qRenderPage = Q.defer();
        createJavascriptRollupServerside().then(
            function (updated) {
                if (updated || !tvFinderHtml) {
                    console.log('rendering page');
                    var jsdom = require("jsdom");
                    jsdom.env(
                        '<html><head></head><body></body></html>',
                        [
                            rootDir + "/node_modules/requirejs/require.js",
                            tvFinderAppJavascriptRollupServersidePathname
                        ],
                        function (errors, window) {
                            if (errors) {
                                qRenderPage.reject(errors);
                                qRenderPage = undefined;
                            }
                            else {
                                window.console = console;
                                window.require(["page/SingleColumn", "app/tvFinderApp"],
                                    function (SingleColumn, tvFinderApp) {
                                        tvFinderApp().then(
                                            function (tvFinder) {
                                                window.$('.jsdom').remove();
                                                qRenderPage.resolve(window.document.outerHTML);
                                                qRenderPage = undefined;
                                            },
                                            function (error) {
                                                qRenderPage.reject(error);
                                                qRenderPage = undefined;
                                            }
                                        )
                                    }
                                );
                            }
                        }
                    );
                }
                else {
                    qRenderPage.resolve(false);
                    qRenderPage = undefined;
                }
            },
            function (error) {
                qRenderPage.reject(error);
                qRenderPage = undefined;
            }
        );
    }
    return qRenderPage.promise;
}

// update apps

function updateApps() {
    if (!qUpdateApps) {
        qUpdateApps = Q.defer();
        Q.all([updatePages(), updateViews(), updateModels()]).then(
            function (updates) {
                var anyUpdates = false, index = 0;
                while (!anyUpdates) {
                    anyUpdates = updates[index++];
                }
                if (anyUpdates) {
                    appsLoadedAfter = 0;
                }
                updateClasses(appPathname, appsLoadedAfter).then(
                    function (after) {
                        var originalAfter = appsLoadedAfter;
                        appsLoadedAfter = after;
                        qUpdateApps.resolve(originalAfter === after);
                        qUpdateApps = undefined;
                    },
                    function (error) {
                        qUpdateApps.reject(error);
                        qUpdateApps = undefined;
                    }
                );
            },
            function (error) {
                qUpdateApps.reject(error);
                qUpdateApps = undefined;
            }
        );
    }
    return qUpdateApps.promise;
}

// update pages

function updatePages() {
    if (!qUpdatePages) {
        qUpdatePages = Q.defer();
        updateClasses(pagePathname, pagesLoadedAfter).then(
            function (after) {
                var originalAfter = pagesLoadedAfter;
                pagesLoadedAfter = after;
                qUpdatePages.resolve(originalAfter === after);
                qUpdatePages = undefined;
            },
            function (error) {
                qUpdatePages.reject(error);
                qUpdatePages = undefined;
            }
        );
    }
    return qUpdatePages.promise;
}

// update views

function updateViews() {
    if (!qUpdateViews) {
        qUpdateViews = Q.defer();
        updateClasses(viewPathname, viewsLoadedAfter).then(
            function (after) {
                var originalAfter = viewsLoadedAfter;
                viewsLoadedAfter = after;
                qUpdateViews.resolve(originalAfter === after);
                qUpdateViews = undefined;
            },
            function (error) {
                qUpdateViews.reject(error);
                qUpdateViews = undefined;
            }
        );
    }
    return qUpdateViews.promise;
}

// update models

function updateModels() {
    if (!qUpdateModels) {
        qUpdateModels = Q.defer();
        updateClasses(modelPathname, modelsLoadedAfter).then(
            function (after) {
                var originalAfter = modelsLoadedAfter;
                modelsLoadedAfter = after;
                qUpdateModels.resolve(originalAfter === after);
                qUpdateModels = undefined;
            },
            function (error) {
                qUpdateModels.reject(error);
                qUpdateModels = undefined;
            }
        );
    }
    return qUpdateModels.promise;
}

// compile css rollup

function createCssRollup() {
    if (!qCreateCssRollup) {
        qCreateCssRollup = Q.defer();
        compileRenderers().then(
            function () {
                var rollupStatPromise = statGeneratedFile(cssRollupPathname),
                    cssStatsPromise = statFilesInDirectoryMatching(rootDir + '/css', /\.css$/);
                Q.all([rollupStatPromise, cssStatsPromise]).then(
                    function (stats) {
                        var rollupStat = stats[0],
                            cssStats = stats[1],
                            rollupMtime = rollupStat ? rollupStat.mtime.getTime() : 0,
                            isOlder = rollupMtime === 0,
                            index = 0;
                        while (!isOlder && index < cssStats.length) {
                            isOlder = rollupMtime < cssStats[index].mtime.getTime();
                            index++;
                        }
                        if (isOlder) {
                            console.log('creating css rollup');
                            exec(rollupJCssCommand, function (error, out, err) {
                                    if (error) {
                                        qCreateCssRollup.reject(new Error(out)); // compile error
                                        qCreateCssRollup = undefined;
                                    }
                                    else {
                                        qCreateCssRollup.resolve(true);
                                        qCreateCssRollup = undefined;
                                    }
                                }
                            );
                        }
                        else {
                            qCreateCssRollup.resolve(false);
                            qCreateCssRollup = undefined;
                        }
                    },
                    function (error) {
                        qCreateCssRollup.reject(error);
                        qCreateCssRollup = undefined;
                    }
                );
            },
            function (error) {
                qCreateCssRollup.reject(error);
                qCreateCssRollup = undefined;
            }
        );
    }
    return qCreateCssRollup.promise;
}

// compile javascript rollup

function createJavascriptRollup() {
    if (!qCreateJavascriptRollup) {
        qCreateJavascriptRollup = Q.defer();
        compileRenderers().then(
            function () {
                var rollupStatPromise = statGeneratedFile(tvFinderAppJavascriptRollupPathname),
                    appStatPromises = statFilesInDirectoryMatching(appPathname, /\.js$/),
                    pageStatPromises = statFilesInDirectoryMatching(pagePathname, /\.js$/),
                    viewStatPromises = statFilesInDirectoryMatching(viewPathname, /\.js$/),
                    modelStatPromises = statFilesInDirectoryMatching(modelPathname, /\.js$/),
                    compilationStatPromise = Q.nfcall(fs.stat, templatesRollupPathname), moduleName;
                Q.all([rollupStatPromise,
                        appStatPromises,
                        pageStatPromises,
                        viewStatPromises,
                        modelStatPromises,
                        compilationStatPromise]).then(
                    function (stats) {
                        var rollupStat = stats[0],
                            appStats = stats[1],
                            pageStats = stats[2],
                            viewStats = stats[3],
                            modelStats = stats[4],
                            compilationMtime = stats[5].mtime.getTime(),
                            rollupMtime = rollupStat ? rollupStat.mtime.getTime() : 0,
                            isOlder = rollupMtime < compilationMtime,
                            stats = appStats.concat(pageStats, viewStats, modelStats),
                            index = 0;
                        while (!isOlder && index < stats.length) {
                            isOlder = rollupMtime < stats[index].mtime.getTime();
                            index++
                        }
                        if (isOlder) {
                            console.log('creating javascript rollup');
                            exec(rollupJavascriptCommand, function (error, out, err) {
                                    if (error) {
                                        qCreateJavascriptRollup.reject(new Error(out + err)); // compile error
                                        qCreateJavascriptRollup = undefined;
                                    }
                                    else {
                                        qCreateJavascriptRollup.resolve(true);
                                        qCreateJavascriptRollup = undefined;
                                    }
                                }
                            );
                        }
                        else {
                            qCreateJavascriptRollup.resolve(false);
                            qCreateJavascriptRollup = undefined;
                        }
                    },
                    function (error) {
                        qCreateJavascriptRollup.reject(error);
                        qCreateJavascriptRollup = undefined;
                    }
                );
            },
            function (error) {
                qCreateJavascriptRollup.reject(error);
                qCreateJavascriptRollup = undefined;
            }
        );
    }
    return qCreateJavascriptRollup.promise;
}

// compile javascript rollup

function createJavascriptRollupServerside() {
    if (!qCreateJavascriptRollupServerside) {
        qCreateJavascriptRollupServerside = Q.defer();
        Q.all([compileRenderers(), createTelevisions()]).then(
            function () {
                var rollupStatPromise = statGeneratedFile(tvFinderAppJavascriptRollupServersidePathname),
                    appStatPromises = statFilesInDirectoryMatching(appPathname, /\.js$/),
                    pageStatPromises = statFilesInDirectoryMatching(pagePathname, /\.js$/),
                    viewStatPromises = statFilesInDirectoryMatching(viewPathname, /\.js$/),
                    modelStatPromises = statFilesInDirectoryMatching(modelPathname, /\.js$/),
                    compilationStatPromise = Q.nfcall(fs.stat, templatesRollupPathname), moduleName;
                Q.all([rollupStatPromise,
                        appStatPromises,
                        pageStatPromises,
                        viewStatPromises,
                        modelStatPromises,
                        compilationStatPromise]).then(
                    function (stats) {
                        var rollupStat = stats[0],
                            appStats = stats[1],
                            pageStats = stats[2],
                            viewStats = stats[3],
                            modelStats = stats[4],
                            compilationMtime = stats[5].mtime.getTime(),
                            rollupMtime = rollupStat ? rollupStat.mtime.getTime() : 0,
                            isOlder = rollupMtime < compilationMtime,
                            stats = appStats.concat(pageStats, viewStats, modelStats),
                            index = 0;
                        while (!isOlder && index < stats.length) {
                            isOlder = rollupMtime < stats[index].mtime.getTime();
                            index++
                        }
                        if (isOlder) {
                            console.log('creating javascript serverside rollup');
                            exec(rollupJavascriptServersideCommand, function (error, out, err) {
                                    if (error) {
                                        qCreateJavascriptRollupServerside.reject(new Error(out + err)); // compile error
                                        qCreateJavascriptRollupServerside = undefined;
                                    }
                                    else {
                                        qCreateJavascriptRollupServerside.resolve(true);
                                        qCreateJavascriptRollupServerside = undefined;
                                    }
                                }
                            );
                        }
                        else {
                            qCreateJavascriptRollupServerside.resolve(false);
                            qCreateJavascriptRollupServerside = undefined;
                        }
                    },
                    function (error) {
                        qCreateJavascriptRollupServerside.reject(error);
                        qCreateJavascriptRollupServerside = undefined;
                    }
                );
            },
            function (error) {
                qCreateJavascriptRollupServerside.reject(error);
                qCreateJavascriptRollupServerside = undefined;
            }
        );
    }
    return qCreateJavascriptRollupServerside.promise;
}

// compile renderers only when necessary

function compileRenderers() {
    if (!qCompileRenderers) {
        qCompileRenderers = Q.defer();
        var compilationStatPromise = statGeneratedFile(templatesRollupPathname),
            templateStatsPromise = statFilesInDirectoryMatching(templatePathname, /\.handlebars$/);
        Q.all([compilationStatPromise, templateStatsPromise]).then(
            function (statsPromises) {
                var targetMtime = statsPromises[0] ? statsPromises[0].mtime.getTime() : 0,
                    templateFileStats = statsPromises[1], sourceMtime, isOlder = targetMtime === 0, index = 0;
                while (!isOlder && index < templateFileStats.length) {
                    isOlder = targetMtime < templateFileStats[index].mtime.getTime();
                    index++
                }
                if (isOlder) {
                    console.log('compiling renderers')
                    exec(compileRenderersCommand, function (error, out, err) {
                            if (error) {
                                qCompileRenderers.reject(new Error(err));
                            }
                            else {
                                requirejs.undef('target/templates');
                                requirejs(['target/templates'], function () {
                                    qCompileRenderers.resolve(true);
                                    qCompileRenderers = undefined;
                                });
                            }
                        }
                    );
                }
                else {
                    qCompileRenderers.resolve(false);
                    qCompileRenderers = undefined;
                }
            },
            function (error) {
                qCompileRenderers.reject(error);
                qCompileRenderers = undefined;
            }
        );
    }
    return qCompileRenderers.promise;
}

// create the televisions script
function createTelevisions() {
    if (!qCreateTelevisions) {
        qCreateTelevisions = Q.defer();
        requirejs(['lib/televisions-server'], function (qTelevisions) {
                qTelevisions.then(
                    function (televisions) {
                        // write target/televisions.js
                        var contents = 'define(["jQuery"], function ($) {'
                            + 'var qTelevisions = $.Deferred();'
                            + 'qTelevisions.resolve(' + JSON.stringify(televisions) + ');'
                            + 'return qTelevisions.promise();'
                            + '});';
                        fs.writeFile(televisionsJavascriptPathname, contents, function (error) {
                                if (error) {
                                    qCreateTelevisions.reject(error);
                                }
                                else {
                                    qCreateTelevisions.resolve();
                                }
                            }
                        );
                    },
                    function (error) {
                        qCreateTelevisions.reject(error);
                    }
                );
            }
        );
    }
    return qCreateTelevisions.promise;
}

// utilities

function statGeneratedFile(pathname) {
    var qStatGeneratedFile = Q.defer();
    fs.stat(pathname, function (error, stat) {
        if (error) {
            if (error.code === 'ENOENT') {
                qStatGeneratedFile.resolve(undefined);
            }
            else {
                qStatGeneratedFile.reject(error);
            }
        }
        else {
            stat.pathname = pathname;
            qStatGeneratedFile.resolve(stat);
        }
    });
    return qStatGeneratedFile.promise;
}

function statFilesInDirectoryMatching(pathname, pattern) {
    var qStatFilesInDirectoryMatching = Q.defer();

    fs.readdir(pathname, function (error, files) {
        if (error) {
            if (error.code === 'ENOENT') {
                qStatFilesInDirectoryMatching.resolve([]);
            }
            else {
                qStatFilesInDirectoryMatching.reject(error);
            }
        }
        else {
            function fsStat(pathname) {
                var qFsStat = Q.defer();
                fs.stat(pathname, function (error, stat) {
                    if (error) {
                        qFsStat.reject(error);
                    }
                    else {
                        stat.pathname = pathname;
                        qFsStat.resolve(stat);
                    }
                });
                return qFsStat.promise;
            }

            var statPromises = [];
            for (var index = 0; index < files.length; index++) {
                if (!pattern || files[index].match(pattern)) {
                    statPromises.push(fsStat(pathname + '/' + files[index]));
                }
            }
            Q.all(statPromises).then(
                function (stats) {
                    qStatFilesInDirectoryMatching.resolve(stats);
                },
                function (error) {
                    qStatFilesInDirectoryMatching.reject(error);
                }
            );
        }
    });
    return qStatFilesInDirectoryMatching.promise;
}

function updateClasses(pathname, after) {
    var qUpdateClasses = Q.defer();
    statFilesInDirectoryMatching(pathname, /\.js$/).then(
        function (stats) {
            var index = 0,
                isOlder = false,
                className,
                classType;
            while (!isOlder && index < stats.length) {
                if (after < stats[index++].mtime.getTime()) {
                    classType = path.basename(pathname);
                    for (index = 0; index < stats.length; index++) {
                        className = classType + '/' + path.basename(stats[index].pathname, '.js');
                        console.log('invalidating ' + className);
                        requirejs.undef(className);
                    }
                    qUpdateClasses.resolve(new Date().getTime());
                    return;
                }
            }
            qUpdateClasses.resolve(after);
        },
        function (error) {
            if (error.code === 'ENOENT') {
                qUpdateClasses.resolve(after);
            }
            else {
                qUpdateClasses.reject(error);
            }
        }
    );
    return qUpdateClasses.promise;
}
