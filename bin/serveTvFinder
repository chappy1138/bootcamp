#!/usr/bin/env node

var path = require('path'),
    exec = require('child_process').exec,
    fs = require('fs'),
    http = require('http'),
    Q = require('q'),
    $ = require('jQuery'),
    requirejs = require('requirejs');

// initialize

var rootDir = path.dirname(path.normalize(__dirname)),
    port = 8080,
    address = '127.0.0.1',
    templatePathname = rootDir + '/template',
    targetPathname = rootDir + '/target',
    templatesRollupPathname = targetPathname + '/templates.js',
    cssRollupPathname = targetPathname + '/index.css',
    javascriptRollupPathname = targetPathname + '/index.js',
    indexHtmlPathname = targetPathname + '/index.html',
    viewPathname = rootDir + '/view',
    viewsLoadedAfter = new Date().getTime(),
    tvFinderContent,
    rollupJCssCommand = [
        'node',
        '/usr/local/lib/node_modules/requirejs/bin/r.js',
        '-o',
        'cssIn="' + rootDir + '/css/tvFinder.css"',
        'out="' + cssRollupPathname + '"'
    ].join(' '),
    rollupJavascriptCommand = [
        'node',
        '/usr/local/lib/node_modules/requirejs/bin/r.js',
        '-o',
        rootDir + '/config/rs.json'
    ].join(' '),
    compileRenderersCommand = [
        'handlebars',
        '--amd',
        templatePathname + '/*.handlebars',
        '--output',
        templatesRollupPathname
    ].join(' ');

var qCompilePage,
    qRenderPage,
    qUpdateViews,
    qCreateCssRollup,
    qCreateJavascriptRollup,
    qCompileRenderers;

requirejs.config({
        baseUrl: rootDir,
        'handlebars': {
            exports: 'Handlebars'
        }
    }
);

requirejs(['Backbone', 'jQuery'], function (Backbone, $) {
    Backbone.$ = $; // necessary, why?
});

// execution

Q.all([compilePage(), createJavascriptRollup()]).then(
    function () {
        servePage();
    },
    function (error) {
        console.error(error.message);
        process.exit(1);
    }
);

// serve the page

function servePage() {
    var viewResolverMap = [
        { pattern: /^(\/target)?\/index\.css$/, action: serveCssRollup },
        { pattern: /^(\/target)?\/index\.js/, action: serveJavascriptRollup },
        { pattern: /^(\/target)?\/index\.html/, action: serveTvFinderHtml },
        { pattern: /^(\/usr\/local\/lib\/node_modules\/.*\.js)/, action: serveJavascriptLibrary },
        { pattern: /^\/(css\/.*\.css)$/, action: serveCss },
        { pattern: /^\/(((js)|(lib)|(view)|(target))\/.*\.js)$/, action: serveJavascript },
        { pattern: /^\/(image\/.*\.png)$/, action: servePng },
        { pattern: /^\/(font\/.*\.otf)$/, action: serveFont },
        { pattern: /^\/$/, action: serveTvFinderHtml }
    ];
    http.createServer(function (req, res) {
            for (index = 0; index < viewResolverMap.length; index++) {
                values = req.url.match(viewResolverMap[index].pattern);
                if (values) {
                    viewResolverMap[index].action(values, req, res).fail(
                        function (error) {
                            if (error.code === 'ENOENT') {
                                console.error(req.url + ': not found: matched: ' + viewResolverMap[index].pattern);
                                notFound(req, res);
                            }
                            else {
                                console.error(req.url + ': ' + error.code + ': ' + error.errno);
                                console.error(req.url, error);
                                res.writeHead(500, {'Content-Type': 'text/plain' });
                                res.end('server error: ' + error.code + ': ' + error.errno);
                            }
                        }
                    );
                    return;
                }
            }
            console.error(req.url + ': not resolved');
            notFound(req, res);
        }
    ).listen(port, address);
    console.log('started server ' + address + ' on port ' + port);
}

function notFound(req, res) {
    res.writeHead(404, {'Content-Type': 'text/plain' });
    res.end('not found');
}

function serveCssRollup(values, req, res) {
    var qServeCssRollup = Q.defer();
    createCssRollup().then(function () {
            fs.readFile(cssRollupPathname, 'ascii', function (error, contents) {
                    if (error) {
                        qServeCssRollup.reject(error);
                    }
                    else {
                        res.writeHead(200, { 'Content-Type': 'text/css' });
                        res.end(contents);
                        qServeCssRollup.resolve();
                    }
                }
            );
        },
        function (error) {
            qServeCssRollup.reject(error);
        }
    );
    return qServeCssRollup.promise;
}

function serveCss(values, req, res) {
    var qServeCss = Q.defer();
    fs.readFile(values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeCss.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'text/css' });
                res.end(contents);
                qServeCss.resolve();
            }
        }
    );
    return qServeCss.promise;
}

function serveJavascriptRollup(values, req, res) {
    var qServeJavascriptRollup = Q.defer();
    createJavascriptRollup().then(function () {
            fs.readFile(javascriptRollupPathname, 'ascii', function (error, contents) {
                    if (error) {
                        qServeJavascriptRollup.reject(error);
                    }
                    else {
                        res.writeHead(200, { 'Content-Type': 'application/javascript' });
                        res.end(contents);
                        qServeJavascriptRollup.resolve();
                    }
                }
            );
        },
        function (error) {
            qServeJavascriptRollup.reject(error);
        }
    );
    return qServeJavascriptRollup.promise;
}

function serveJavascript(values, req, res) {
    var qServeJavascript = Q.defer();
    fs.readFile(rootDir + '/' + values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeJavascript.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/javascript' });
                res.end(contents);
                qServeJavascript.resolve();
            }
        }
    );
    return qServeJavascript.promise;
}

function serveJavascriptLibrary(values, req, res) {
    var qServeJavascript = Q.defer();
    fs.readFile(values[1], 'ascii', function (error, contents) {
            if (error) {
                qServeJavascript.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'application/javascript' });
                res.end(contents);
                qServeJavascript.resolve();
            }
        }
    );
    return qServeJavascript.promise;
}

function servePng(values, req, res) {
    var qServePng = Q.defer();
    fs.readFile(values[1], function (error, contents) {
            if (error) {
                qServePng.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'image/png' });
                res.end(contents);
                qServePng.resolve();
            }
        }
    );
    return qServePng.promise;
}

function serveFont(values, req, res) {
    var qServeFont = Q.defer();
    fs.readFile(values[1], function (error, contents) {
            if (error) {
                qServeFont.reject(error);
            }
            else {
                res.writeHead(200, { 'Content-Type': 'font/opentype' });
                res.end(contents);
                qServeFont.resolve();
            }
        }
    );
    return qServeFont.promise;
}

function serveTvFinderHtml(values, req, res) {
    var qServeTvFinderHtml = Q.defer();
    compilePage()
        .then(function (tvFilterContent) {
            res.writeHead(200, { 'Content-Type': 'text/html' });
            res.end(tvFilterContent);
            qServeTvFinderHtml.resolve();
        })
        .fail(function (error) {
            qServeTvFinderHtml.reject(error);
        });
    return qServeTvFinderHtml.promise;
}

// compile the page

function compilePage() {
    if (!qCompilePage) {
        qCompilePage = Q.defer();
        Q.all([renderPage(), statGeneratedFile(indexHtmlPathname)]).then(
            function (updated, stat) {
                if (updated || !tvFinderContent) {
                    tvFinderContent = '<!doctype html>\n\n';
                    tvFinderContent += $("html")[0].outerHTML;
                    tvFinderContent = tvFinderContent.replace(/<!--#/g, '<');
                    tvFinderContent = tvFinderContent.replace(/#-->/g, '>');
                }
                if (updated || !stat) {
                    fs.writeFile(indexHtmlPathname, tvFinderContent, function (error) {
                    });
                }
                qCompilePage.resolve(tvFinderContent);
                qCompilePage = undefined;
            },
            function (error) {
                qCompilePage.reject(error);
            }
        );
    }
    return qCompilePage.promise;
}

// render the page

function renderPage() {
    if (!qRenderPage) {
        qRenderPage = Q.defer();
        Q.all([updateViews(), compileRenderers()]).then(
            function (updates) {
                var viewUpdated = updates[0], renderersCompiled = updates[1];
                if (viewUpdated || renderersCompiled || !tvFinderContent) {
                    console.log('rendering page');
                    requirejs(['jQuery', 'view/Head', 'view/SingleColumnTemplate'], function ($, Head, SingleColumnTemplate) {
                        new Head({ el: $('head') }).render();
                        new SingleColumnTemplate({ el: $('body') }).render();
                        requirejs.undef('js/tvFinderApp');
                        requirejs(['js/tvFinderApp'], function (tvFinder) {
                            tvFinder.render();
                            qRenderPage.resolve(true);
                            qRenderPage = undefined;
                        });
                    });
                }
                else {
                    qRenderPage.resolve(viewUpdated || renderersCompiled);
                    qRenderPage = undefined;
                }
            },
            function (error) {
                qRenderPage.reject(error);
            }
        );
    }
    return qRenderPage.promise;
}

// update views

function updateViews() {
    if (!qUpdateViews) {
        qUpdateViews = Q.defer();
        var moduleName;
        statFilesInDirectoryMatching(viewPathname, /\.js$/).then(
            function (viewStats) {
                var index = 0,
                    isOlder = false,
                    moduleName;
                while (!isOlder && index < viewStats.length) {
                    if (viewsLoadedAfter < viewStats[index].mtime.getTime()) {
                        console.log('invalidating all views');
                        for (index = 0; index < viewStats.length; index++) {
                            moduleName = 'view/' + path.basename(viewStats[index].pathname, '.js');
                            requirejs.undef(moduleName);
                        }
                        viewsLoadedAfter = new Date().getTime();
                        qUpdateViews.resolve(true);
                        qUpdateViews = undefined;
                        return;
                    }
                    index++;
                }
                qUpdateViews.resolve(false);
                qUpdateViews = undefined;
            },
            function (error) {
                qUpdateViews.reject(error);
            }
        );
    }
    return qUpdateViews.promise;
}

// compile css rollup

function createCssRollup() {
    if (!qCreateCssRollup) {
        qCreateCssRollup = Q.defer();
        compileRenderers().then(
            function () {
                var rollupStatPromise = statGeneratedFile(cssRollupPathname),
                    cssStatsPromise = statFilesInDirectoryMatching(rootDir + '/css', /\.css$/);
                Q.all([rollupStatPromise, cssStatsPromise]).then(
                    function (stats) {
                        var rollupStat = stats[0],
                            cssStats = stats[1],
                            rollupMtime = rollupStat ? rollupStat.mtime.getTime() : 0,
                            isOlder = rollupMtime === 0,
                            index = 0;
                        while (!isOlder && index < cssStats.length) {
                            isOlder = rollupMtime < cssStats[index].mtime.getTime();
                            index++;
                        }
                        if (isOlder) {
                            console.log('creating css rollup');
                            exec(rollupJCssCommand, function (error, out, err) {
                                    if (error) {
                                        qCreateCssRollup.reject(new Error(out)); // compile error
                                    }
                                    else {
                                        qCreateCssRollup.resolve(true);
                                        qCreateCssRollup = undefined;
                                    }
                                }
                            );
                        }
                        else {
                            qCreateCssRollup.resolve(false);
                            qCreateCssRollup = undefined;
                        }
                    },
                    function (error) {
                        qCreateCssRollup.reject(error);
                    }
                );
            },
            function (error) {
                qCreateCssRollup.reject(error);
            }
        );
    }
    return qCreateCssRollup.promise;
}

// compile javascript rollup

function createJavascriptRollup() {
    if (!qCreateJavascriptRollup) {
        qCreateJavascriptRollup = Q.defer();
        compileRenderers().then(
            function () {
                var rollupStatPromise = statGeneratedFile(javascriptRollupPathname),
                    viewStatPromises = statFilesInDirectoryMatching(viewPathname, /\.js$/),
                    compilationStatPromise = Q.nfcall(fs.stat, templatesRollupPathname), moduleName;
                Q.all([rollupStatPromise, viewStatPromises, compilationStatPromise]).then(
                    function (stats) {
                        var rollupStat = stats[0],
                            viewStats = stats[1],
                            compilationMtime = stats[2].mtime.getTime(),
                            rollupMtime = rollupStat ? rollupStat.mtime.getTime() : 0,
                            isOlder = rollupMtime < compilationMtime,
                            index = 0;
                        while (!isOlder && index < viewStats.length) {
                            isOlder = rollupMtime < viewStats[index].mtime.getTime();
                            index++
                        }
                        if (isOlder) {
                            console.log('creating javascript rollup');
                            exec(rollupJavascriptCommand, function (error, out, err) {
                                    if (error) {
                                        qCreateJavascriptRollup.reject(new Error(out + err)); // compile error
                                    }
                                    else {
                                        qCreateJavascriptRollup.resolve(true);
                                        qCreateJavascriptRollup = undefined;
                                    }
                                }
                            );
                        }
                        else {
                            qCreateJavascriptRollup.resolve(false);
                            qCreateJavascriptRollup = undefined;
                        }
                    },
                    function (error) {
                        qCreateJavascriptRollup.reject(error);
                    }
                );
            },
            function (error) {
                qCreateJavascriptRollup.reject(error);
            }
        );
    }
    return qCreateJavascriptRollup.promise;
}

// compile renderers only when necessary

function compileRenderers() {
    if (!qCompileRenderers) {
        qCompileRenderers = Q.defer();
        var compilationStatPromise = statGeneratedFile(templatesRollupPathname),
            templateStatsPromise = statFilesInDirectoryMatching(templatePathname, /\.handlebars$/);
        Q.all([compilationStatPromise, templateStatsPromise]).then(
            function (statsPromises) {
                var targetMtime = statsPromises[0] ? statsPromises[0].mtime.getTime() : 0,
                    templateFileStats = statsPromises[1], sourceMtime, isOlder = targetMtime === 0, index = 0;
                while (!isOlder && index < templateFileStats.length) {
                    isOlder = targetMtime < templateFileStats[index].mtime.getTime();
                    index++
                }
                if (isOlder) {
                    console.log('compiling renderers')
                    exec(compileRenderersCommand, function (error, out, err) {
                            if (error) {
                                qCompileRenderers.reject(new Error(err));
                            }
                            else {
                                requirejs.undef('target/templates');
                                requirejs(['target/templates'], function () {
                                    qCompileRenderers.resolve(true);
                                    qCompileRenderers = undefined;
                                });
                            }
                        }
                    );
                }
                else {
                    qCompileRenderers.resolve(false);
                    qCompileRenderers = undefined;
                }
            },
            function (error) {
                qCompileRenderers.reject(error);
            }
        );
    }
    return qCompileRenderers.promise;
}

// utilities

function statGeneratedFile(pathname) {
    var qStatGeneratedFile = Q.defer();
    fs.stat(pathname, function (error, stat) {
        if (error) {
            if (error.code === 'ENOENT') {
                qStatGeneratedFile.resolve(undefined);
            }
            else {
                qStatGeneratedFile.reject(error);
            }
        }
        else {
            stat.pathname = pathname;
            qStatGeneratedFile.resolve(stat);
        }
    });
    return qStatGeneratedFile.promise;
}

function statFilesInDirectoryMatching(pathname, pattern) {
    var qStatFilesInDirectoryMatching = Q.defer();

    fs.readdir(pathname, function (error, files) {
        if (error) {
            qStatFilesInDirectoryMatching.reject(error);
        }
        else {
            function fsStat(pathname) {
                var qFsStat = Q.defer();
                fs.stat(pathname, function (error, stat) {
                    if (error) {
                        qFsStat.reject(error);
                    }
                    else {
                        stat.pathname = pathname;
                        qFsStat.resolve(stat);
                    }
                });
                return qFsStat.promise;
            }

            var statPromises = [];
            for (var index = 0; index < files.length; index++) {
                if (!pattern || files[index].match(pattern)) {
                    statPromises.push(fsStat(pathname + '/' + files[index]));
                }
            }
            Q.all(statPromises).then(
                function (stats) {
                    qStatFilesInDirectoryMatching.resolve(stats);
                },
                function (error) {
                    qStatFilesInDirectoryMatching.reject(error);
                }
            );
        }
    });
    return qStatFilesInDirectoryMatching.promise;
}
